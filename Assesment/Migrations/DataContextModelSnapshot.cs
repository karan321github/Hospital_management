// <auto-generated />
using System;
using Assesment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assesment.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assesment.Models.Bill", b =>
                {
                    b.Property<int>("BId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.HasKey("BId");

                    b.HasIndex("PId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Assesment.Models.Doctor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EId")
                        .HasColumnType("int");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("EId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Assesment.Models.Employee", b =>
                {
                    b.Property<int>("EId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employee_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Assesment.Models.Nurse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EId")
                        .IsUnique();

                    b.ToTable("Nurses");
                });

            modelBuilder.Entity("Assesment.Models.Patient", b =>
                {
                    b.Property<int>("PId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("PId");

                    b.HasIndex("RoomId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Assesment.Models.Receptionist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EId")
                        .IsUnique();

                    b.ToTable("Receptionists");
                });

            modelBuilder.Entity("Assesment.Models.Record", b =>
                {
                    b.Property<int>("RecordNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordNo"));

                    b.Property<int>("AppNo")
                        .HasColumnType("int");

                    b.HasKey("RecordNo");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Assesment.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<int>("Capactiy")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Assesment.Models.TestReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.HasIndex("PId");

                    b.ToTable("TestReports");
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<int>("Doctorsid")
                        .HasColumnType("int");

                    b.Property<int>("PatientsPId")
                        .HasColumnType("int");

                    b.HasKey("Doctorsid", "PatientsPId");

                    b.HasIndex("PatientsPId");

                    b.ToTable("PatientDoctor", (string)null);
                });

            modelBuilder.Entity("NurseRoom", b =>
                {
                    b.Property<int>("NursesId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsRoomId")
                        .HasColumnType("int");

                    b.HasKey("NursesId", "RoomsRoomId");

                    b.HasIndex("RoomsRoomId");

                    b.ToTable("NurseRoom", (string)null);
                });

            modelBuilder.Entity("ReceptionistRecord", b =>
                {
                    b.Property<int>("ReceptionistsId")
                        .HasColumnType("int");

                    b.Property<int>("RecordsRecordNo")
                        .HasColumnType("int");

                    b.HasKey("ReceptionistsId", "RecordsRecordNo");

                    b.HasIndex("RecordsRecordNo");

                    b.ToTable("ReceptionistRecords", (string)null);
                });

            modelBuilder.Entity("Assesment.Models.Bill", b =>
                {
                    b.HasOne("Assesment.Models.Patient", "Patient")
                        .WithMany("Bills")
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Assesment.Models.Doctor", b =>
                {
                    b.HasOne("Assesment.Models.Employee", "Employee")
                        .WithOne("Doctor")
                        .HasForeignKey("Assesment.Models.Doctor", "EId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Assesment.Models.Nurse", b =>
                {
                    b.HasOne("Assesment.Models.Employee", "Employee")
                        .WithOne("Nurse")
                        .HasForeignKey("Assesment.Models.Nurse", "EId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Assesment.Models.Patient", b =>
                {
                    b.HasOne("Assesment.Models.Room", "Room")
                        .WithMany("Patients")
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Assesment.Models.Receptionist", b =>
                {
                    b.HasOne("Assesment.Models.Employee", "Employee")
                        .WithOne("Receptionist")
                        .HasForeignKey("Assesment.Models.Receptionist", "EId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Assesment.Models.TestReport", b =>
                {
                    b.HasOne("Assesment.Models.Patient", "Patient")
                        .WithMany("Tests")
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("Assesment.Models.Doctor", null)
                        .WithMany()
                        .HasForeignKey("Doctorsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assesment.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NurseRoom", b =>
                {
                    b.HasOne("Assesment.Models.Nurse", null)
                        .WithMany()
                        .HasForeignKey("NursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assesment.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReceptionistRecord", b =>
                {
                    b.HasOne("Assesment.Models.Receptionist", null)
                        .WithMany()
                        .HasForeignKey("ReceptionistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assesment.Models.Record", null)
                        .WithMany()
                        .HasForeignKey("RecordsRecordNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Assesment.Models.Employee", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Nurse")
                        .IsRequired();

                    b.Navigation("Receptionist")
                        .IsRequired();
                });

            modelBuilder.Entity("Assesment.Models.Patient", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Assesment.Models.Room", b =>
                {
                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
